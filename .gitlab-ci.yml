stages:
  - terraform
  - ansible
  - destroy

variables:
  TF_WORKING_DIR: "terraform/"
  ANSIBLE_WORKING_DIR: "ansible/"
  ANSIBLE_INVENTORY: "ansible/inventory.ini"
  AWS_REGION: "us-west-2"

# Terraform Stage: Provision Infrastructure
terraform:
  stage: terraform
  image:
    name: hashicorp/terraform:latest
    entrypoint: [""]

  before_script:
    - cd terraform
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    # No need to manually export TF_HTTP_PASSWORD (it's already set)
  script:
    - terraform init  # Uses TF_HTTP_PASSWORD from variables
    - terraform validate
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
  rules:
    - changes:
        - terraform/*.tf   # Only run if Terraform files change
# Inventory Update: Fetch EC2 IP and Update Ansible Inventory
ansible:
  stage: ansible
  image: python:3.9  # Disable default entrypoint
  before_script:
    - apt update && apt install -y ansible
   # - apk add --no-cache bash dos2unix  # Install dos2unix
    #- dos2unix update_inventory.sh  
    - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /usr/share/keyrings/hashicorp-archive-keyring.gpg
    - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
    - apt update && apt install -y terraform 
    - cd terraform 
    - terraform init # Navigate to the Terraform directory
  script:
    - EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)  # Fetch EC2 Public IP
    - echo "EC2 Public IP= $EC2_PUBLIC_IP" # Verify this works
    - cd ..
    - apt update && apt install -y dos2unix bash  # Install dos2unix
    - dos2unix update_inventory.sh  
    - chmod +x update_inventory.sh
    - bash update_inventory.sh
    - cd ansible
    - apt update && apt install -y ansible
    - mkdir ~/.ssh
    - mv 4ansible.pem ~/.ssh/
    - chmod 400 ~/.ssh/keypair.pem
    - ls -l ~/.ssh/keypair.pem
    - cat inventory.ini
    - ansible-playbook -i inventory.ini setup.yml

  dependencies:
    - terraform  # Ensure this job gets the terraform state file from the previous job
  rules:
    - changes:
        - ansible/setup.yml   # Only run if Terraform files change


destroy:
  stage: destroy
  image:
    name: hashicorp/terraform:latest
    entrypoint: [""]

  before_script:
    - cd terraform
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    # No need to manually export TF_HTTP_PASSWORD (it's already set)
  script:
    - terraform init  # Uses TF_HTTP_PASSWORD from variables
    - terraform destroy -auto-approve
  rules:
    - when: manual
  
